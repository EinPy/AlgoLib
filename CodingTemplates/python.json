{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"competetive_template":{
		"prefix": "competetive_template",
		"body": [
			"import sys",
			"from collections import *",
			"sys.setrecursionlimit(10**5)",
			"itr = (line for line in sys.stdin.read().strip().split('\\n'))",
			"INP = lambda: next(itr)",
			"def ni(): return int(INP())",
			"def nl(): return [int(_) for _ in INP().split()]",
			"\n\n",
			"def solve(${1:n,a}):",
			"    pass$0\n\n",
			"t = ni()",
			"for case in range(t):",
			"    n = ni()",
			"    a = nl()",
			"    solve(${1:n,a})"

		],
		"description": "Competetive template for python"
	},
	
	"binary_search":{
		"prefix": "s_binary_search",
		"body": [
			"def bns(x,arr):",
			"    l, r = 0, len(arr)-1\n",
			"    while l <= r:",
			"        mid = (l + r) // 2",
			"        if arr[mid] == x:",
			"            return mid",
			"        if arr[mid] > x:",
			"            r = mid - 1",
			"        else:",
			"            l = mid + 1\n",
			"    return -1",
		],
		"description": "Binary serach of array"
	},

	"lower_bound":{
		"prefix": "s_lower_bound",
		"body": [
			"#Binary search for lower bound",
			"def lower_bound(a, x):",
			"    l, r, m = 0, len(a), 0",
			"    ans = -1",
			"    while l <= r:",
			"        mid = (l + r) // 2",
			"        if a[mid] == x:",
			"            ans = mid",
			"            r = mid-1",
			"        else:",
			"            l = mid + 1",
			"    return ans",

		]
	}
}
}
